#!/usr/bin/perl
#
# This program downloads messages from GMail using IMAP and stores them
# locally in Maildir-format mailboxes. It copes with disconnections and
# interruptions gracefully, and tries to pick up downloading where it
# left off.
#
# The following command will prompt for a password and then download all
# of a user's mailboxes:
#
#       $ gmail-mirror.pl username
#
# You can also specify a list of mailboxes to mirror:
#
#       $ gmail-mirror.pl username INBOX work personal
#
# In either case, the downloaded messages will be stored in a directory
# named "gmail/mailboxname/somenumber". (Note: GMail doesn't really have
# mailboxes. An IMAP mailbox named x is the set of messages labelled x.)
# You can run "gmail-mirror.pl -v user" for verbose progress updates.
#
# You may use, modify, or redistribute this program freely, but please
# retain the copyright notice, and clearly identify modified versions
# as being different from the original. There is no warranty.
#
# Copyright 2010 Abhijit Menon-Sen <ams@toroid.org>
# http://toroid.org/ams/etc/gmail-imap-mirror
#

use IO::Select;
use IO::Socket::SSL;

$V = 0;
while ( $ARGV[0] eq '-v' ) {
    shift @ARGV;
    $V++;
}

my $syntax = "Syntax: gmail-fetch [-v] <username> [<mailbox> ...]\n";

my $user = shift @ARGV || die $syntax;
my $pass = $ENV{GMAIL_PASSWORD};
unless ( $pass ) {
    system( "stty -echo" );
    print "Password: ";
    chomp( $pass = <STDIN> );
    print "\n";
    system( "stty echo" );
}

mkdir "gmail" unless -d "gmail";

do {
    eval {
        mirror( @ARGV );
    };
    print "ERROR: $@" and sleep 2 if $@;
} while ( $@ );

sub mirror {
    my ( @mailboxes ) = @_;

    print "Connecting to imap.gmail.com:993\n";
    my $imap = IO::Socket::SSL->new( "imap.gmail.com:993" )
        or die "Couldn't connect: " . IO::Socket::SSL::errstr();

    unless ( defined $imap->blocking( 0 ) ) {
        die "Couldn't set socket non-blocking: $!";
    }

    my $processor = imap_processor( $imap, @mailboxes );

    my $buf;
    my $sel = IO::Select->new( $imap );
    while ( 1 ) {
        next unless $sel->can_read( 2 );

        my $n = $imap->sysread( $buf, 1024, length $buf );

        if ( not defined $n ) {
            # A read error here would normally mean something broke, but
            # with IO::Socket::SSL, it seems to mean "no data available
            # right now".
            next;
        }
        elsif ( $n != 0 ) {
            # If there's any more data available, get it all.
            while ( defined $n && $n == 1024 ) {
                $n = $imap->sysread( $buf, 1024, length $buf )
            }
        }
        else {
            $buf = undef;
        }

        my $error = $processor->( \$buf );
        last if defined $error;
    }
}

sub imap_processor {
    # This is all the state the IMAP processor maintains

    my ( $imap, @mailboxes ) = @_;
    my $state = 1;
    my $literal = 0;
    my $written = 0;
    my ( $mailbox, $local, @partial, @full );
    my ( $uid, $uidvalidity, $dir, $file, $fh );

    # And this is the IMAP processor, closed over all that state.

    return sub {
        my ( $buf ) = @_;

        unless ( defined $$buf ) {
            die "Connection closed unexpectedly in state $state"
                unless $state eq "closing";
            return 0;
        }

        # If we're reading a literal, we'll avoid the usual line-by-line
        # processing and go straight to the literal-reading code inside.
        goto LITERAL if $literal;

        while ( $$buf =~ s/^(.*?)\r\n//sm ) {
            my $line = $1;

            log_response( $state, $line );

            if ( $line =~ /^x(?:yz)? BAD /i ) {
                print "ERROR: Unexpected syntax error\n";
                return 0;
            }

            # Authenticate.

            if ( $state == 1 ) {
                $imap->writeln( qq{a LOGIN "$user" "$pass"} );
                $state++;
                next;
            }

            # Fetch the mailbox list, unless one was given to us.

            if ( $state == 2 ) {
                if ( $line =~ /^a NO /i ) {
                    print "ERROR: Authentication failed\n";
                    return 0;
                }
                elsif ( $line =~ /^a OK /i ) {
                    if ( @mailboxes ) {
                        $state += 2;
                    }
                    else {
                        $imap->writeln( qq{b LIST "" "*"} );
                        $state++;
                        next;
                    }
                }
            }

            # Parse the mailbox list (if we asked for one above).

            if ( $state == 3 ) {
                if ( $line =~ /^b NO /i ) {
                    print "ERROR: Couldn't fetch mailbox list\n";
                    return 0;
                }
                elsif ( $line =~ /^\* LIST (?:\([^\)]+\) )?"\/" "([^"]+)"$/ ) {
                    my $mailbox = $1;

                    # Skip special mailboxes
                    next if $line =~ /\\NoSelect/i;
                    next if ( $mailbox =~ /^\[Google Mail\]/ &&
                              not( $mailbox =~ /\/Drafts$/ ||
                                   $mailbox =~ /\/Sent Mail$/ ) );

                    push @mailboxes, $mailbox;
                }
                elsif ( $line =~ /^b OK /i ) {
                    $state++;
                }
            }

            # Examine each mailbox in turn.

            if ( $state == 4 ) {
        REEXAMINE:
                $state = 4;
                if ( @mailboxes ) {
                    $mailbox = shift @mailboxes;
                    print "Examining mailbox $mailbox\n";
                    $imap->writeln( qq{c EXAMINE "$mailbox"} );
                    $state++;
                    next;
                }
                else {
                    $state = 8;
                }
            }

            # Set up the local mailbox based on the EXAMINE response and
            # fetch the MSN-UID map.

            if ( $state == 5 ) {
                if ( $line =~ /^c NO /i ) {
                    print "ERROR: Couldn't select mailbox '$mailbox'\n";
                    return 0;
                }
                elsif ( $line =~ /^\* OK \[UIDVALIDITY (\d+)\]/ ) {
                    $uidvalidity = $1;

                    ( $local = $mailbox ) =~ y{/ }{._};

                    $dir = "gmail/$local";
                    mkdir $dir unless -d $dir;

                    $dir .= "/$uidvalidity";
                    mkdir $dir unless -d $dir;
                    mkdir "$dir/tmp" unless -d "$dir/tmp";
                    mkdir "$dir/new" unless -d "$dir/new";
                    mkdir "$dir/cur" unless -d "$dir/cur";
                }
                elsif ( $line =~ /^c OK /i ) {
                    @partial = @full = ();
                    $imap->writeln( qq{d FETCH 1:* UID} );
                    $state++;
                    next;
                }
            }

            # Check which UIDs we recognise. If there's a file in new,
            # we don't need to do anything. If there's a file in tmp,
            # the message (probably) wasn't downloaded fully, so we
            # construct a partial FETCH for it; otherwise we add the
            # message to a set for which we issue a consolidated FETCH.

            if ( $state == 6 ) {
                if ( $line =~ /^d NO /i ) {
                    print "ERROR: Couldn't fetch MSN-UID map\n";
                    return 0;
                }
                elsif ( $line =~ /^\* (\d+) FETCH \(UID (\d+)\)$/ ) {
                    my ( $msn, $uid ) = ( $1, $2 );
                    if ( -f "$dir/tmp/$uid" ) {
                        my $n = -s "$dir/tmp/$uid";
                        push @partial,
                            qq{f FETCH $msn (UID BODY[]<$n.2147483647>)};
                    }
                    elsif ( ! -f "$dir/new/$uid" ) {
                        push @full, $msn;
                    }
                }
                elsif ( $line =~ /^d OK /i ) {
                    unless ( @partial || @full ) {
                        print "Mailbox $mailbox is already in sync with $dir\n";
                        goto REEXAMINE;
                    }

                    print "Fetching ", ~~@partial, "+", ~~@full, " messages\n";

                    foreach ( @partial ) {
                        $imap->writeln( $_ );
                    }
                    if ( @full ) {
                        my $set = reduce_set( @full );
                        $imap->writeln( qq{ff FETCH $set (UID BODY[])} );
                    }

                    $state++;
                    next;
                }
            }

            # Every FETCH response will contain the UID and some literal
            # data from the BODY[]. We append the data to tmp/$uid as we
            # receive it, and rename the file to new/$uid when the whole
            # literal is received.

            if ( $state == 7 ) {
                if ( $line =~ /^\* \d+ FETCH \(UID (\d+) BODY\[\](?:<\d+>)? {(\d+)}$/ ) {
                    ( $uid, $literal ) = ($1, $2);
                    $written = 0;
                    $file = "$dir/tmp/$uid";
                    unless ( open ( $fh, ">>", "$dir/tmp/$uid" ) ) {
                        print "ERROR: Can't open $file: $!\n";
                        return 0;
                    }
        LITERAL:
                    my $data = substr( $$buf, 0, $literal-$written, '' );
                    if ( $data ) {
                        unless ( syswrite $fh, $data ) {
                            print "ERROR: Can't write to $file: $!\n";
                            return 0;
                        }
                        $written += length $data;
                    }
                    last if $written < $literal;

                    print "Saving message $dir/new/$uid (got $literal bytes)\n";
                    close $fh;
                    unless ( rename( $file, "$dir/new/$uid" ) ) {
                        print "ERROR: Can't rename $file: $!\n";
                        return 0;
                    }
                    $written = $literal = 0;
                }
                elsif ( $line =~ /^ff? NO /i ) {
                    print "ERROR: Couldn't fetch messages\n";
                    return 0;
                }
                elsif ( $line =~ /^ff OK /i ) {
                    # We cheat and pay attention only to the very last
                    # OK response to the FETCHes we sent.
                    goto REEXAMINE;
                }
            }

            # Nothing left to do but say goodbye

            if ( $state == 8 ) {
                $imap->writeln( qq{x LOGOUT} );
                $state = 9;
                next;
            }

            if ( $state == 9 ) {
                $state = "closing" if $line =~ /^x OK /i;
            }
        }

        return;
    };
}

# Convert (1,2,3,17,21,22,23) to "1-3,17,21-23"

sub reduce_set {
    my @out;
    my @in = sort { $a <=> $b } @_;
    while ( @in ) {
        my ( $min, $max );
        $min = $max = shift @in;
        while ( $in[0] == $max+1 ) {
            $max = shift @in;
        }

        if ( $min == $max ) {
            push @out, $min;
        }
        else {
            push @out, "$min:$max";
        }
    }

    return join ",", @out;
}

my $msns = 0;
my $list = 0;
sub log_response {
    my ( $state, $line ) = @_;

    if ( $V ) {
        if ( $V > 1 ) {
            print "S$state: $line\n";
        }
        elsif ( $line =~ /^\* \d+ FETCH \(UID \d+\)$/ ) {
            $msns++;
            print "S$state: <...MSN-UID map...>\n" if $msns == 1;
        }
        elsif ( $line =~ /^\* LIST / ) {
            $list++;
            print "S$state: <...mailbox list...>\n" if $list == 1;
        }
        else {
            $msns = $list = 0;
            print "S$state: $line\n";
        }
    }
}

sub IO::Socket::SSL::writeln {
    my ( $s, $line ) = @_;

    $s->blocking(1);
    print "C: $line\n" if $main::V;
    print $s $line, "\r\n";
    $s->blocking(0);
}
